// Generated by CoffeeScript 1.3.3
(function() {
  var allLinesRead, db, dbConnected, episodeDBName, fs, linesParsed, nameSafe, parseLine, pg, ratings, ratingsLoaded;

  fs = require('fs');

  pg = require('pg');

  nameSafe = require('./FixName.js');

  ratings = null;

  ratingsLoaded = function(err, data) {
    ratings = data.split("\n");
    return pg.connect(process.env.HEROKU_POSTGRESQL_PURPLE_URL, dbConnected);
  };

  db = null;

  dbConnected = function(err, client) {
    db = client;
    return parseLine();
  };

  linesParsed = 0;

  parseLine = function() {
    var line, name, parenPos, rating, sql, title;
    line = ratings[linesParsed];
    if (typeof line === 'undefined') {
      allLinesRead();
      return;
    }
    if (line.indexOf('{') === -1 && line.indexOf('Pilot') === -1) {
      linesParsed += 1;
      parseLine();
      return;
    }
    name = line.match(/\{[^}]+/);
    if (name === null) {
      name = "The Seinfeld Chronicles";
      rating = line.match(/([0-9]\.[0-9])\s+The/);
    } else {
      name = name[0].substr(1);
      parenPos = name.indexOf('(');
      name = name.substr(0, parenPos);
      rating = line.match(/([0-9]\.[0-9])\s+"/);
    }
    rating = parseFloat(rating[1]);
    title = episodeDBName(name);
    if (title === null) {
      linesParsed++;
      parseLine();
      return;
    }
    sql = 'UPDATE episode SET imdbrating=' + rating + ' WHERE title LIKE \'' + title + '%\'';
    return db.query(sql, function(err, result) {
      if (result.rowCount === 0) {
        console.log(sql);
      }
      linesParsed += 1;
      return parseLine();
    });
  };

  episodeDBName = function(name) {
    name = nameSafe.FixName(name);
    if (name === null) {
      return null;
    }
    name = name.replace("'", "''");
    return name;
  };

  allLinesRead = function() {
    console.log('done');
    return process.exit();
  };

  fs.readFile('data/imdb/seinfeldRatings', 'utf8', ratingsLoaded);

}).call(this);
