// Generated by CoffeeScript 1.3.3
(function() {
  var NameFixer, actor, actorLines, actorLinesInserted, actorsLoaded, allLinesRead, characterIDS, characterInserted, db, dbConnected, fs, getCharacterID, getEpisodeID, insertActor, insertActorLine, insertActorLines, insertPerson, insertPersonCB, insertingActor, insertingCharacter, insertingCharacterID, insertingEpisode, insertingEpisodeID, insertingLines, lines, linesRead, linesToInsert, personExists, personID, personInRoleInserted, pg, readLine, readList, selectCharacterIDCB;

  fs = require('fs');

  pg = require('pg');

  NameFixer = require('./FixName');

  actor = '';

  actorLines = [];

  lines = null;

  linesRead = 0;

  actorsLoaded = function(err, data) {
    lines = data.split("\n");
    return readLine();
  };

  readLine = function() {
    var actorName, actorNames, actorToInsert, actorsLines, line, tabLocation;
    line = lines[linesRead];
    if (typeof line === 'undefined') {
      allLinesRead();
      return;
    }
    if (line.charAt(0) !== '\t') {
      actorToInsert = actor;
      actorsLines = actorLines;
      tabLocation = line.indexOf('\t');
      actorName = line.substr(0, tabLocation);
      actorNames = actorName.split(/, /);
      actor = actorNames[1] + ' ' + actorNames[0];
      actorLines = [];
      actorLines.push(line);
      linesRead++;
      if (actorToInsert.trim() !== '') {
        insertActor(actorToInsert, actorsLines);
        return;
      }
    } else {
      actorLines.push(line);
      linesRead++;
    }
    return readLine();
  };

  db = null;

  dbConnected = function(err, client) {
    db = client;
    if (process.argv.length > 3 && process.argv[3] === 'false') {
      return db.query('BEGIN', readList);
    } else {
      console.log('delete');
      return db.query('DELETE FROM character', function(err, result) {
        return db.query('DELETE FROM episode_has_person_in_role WHERE role_id=1', function() {
          return db.query('BEGIN', readList);
        });
      });
    }
  };

  readList = function(err, result) {
    if (process.argv.length < 3 || (process.argv[2] !== 'actors' & process.argv[2] !== 'actresses')) {
      console.log('please specify actors or actresses');
      process.exit();
    }
    return fs.readFile('data/imdb/seinfeld' + process.argv[2] + '.list', 'utf8', actorsLoaded);
  };

  personID = -1;

  insertingActor = '';

  insertingLines = [];

  insertActor = function(actor, lines) {
    personID = -1;
    console.log(actor);
    insertingActor = actor;
    insertingLines = lines;
    return db.query('SELECT person_id FROM person WHERE name=$1', [insertingActor], personExists);
  };

  personExists = function(err, result) {
    if (err !== null) {
      console.log(err);
      console.log(result);
    }
    if (result.rowCount !== 0) {
      personID = result.rows[0]['person_id'];
      return insertActorLines();
    } else {
      return db.query('INSERT INTO person (name) VALUES ($1) RETURNING person_id', [insertingActor], insertPersonCB);
    }
  };

  insertPersonCB = function(err, result) {
    if (result.rowCount === 1) {
      personID = result.rows[0]['person_id'];
      return insertActorLines();
    } else {
      console.log(err);
      return console.log(result);
    }
  };

  linesToInsert = -1;

  actorLinesInserted = 0;

  insertActorLines = function() {
    linesToInsert = insertingLines.length;
    actorLinesInserted = 0;
    return insertActorLine();
  };

  insertingEpisode = '';

  insertingEpisodeID = -1;

  insertingCharacter = '';

  insertingCharacterID = -1;

  characterIDS = {};

  insertActorLine = function() {
    var character, episode, line;
    line = insertingLines[actorLinesInserted];
    if (typeof line === 'undefined') {
      readLine();
      return;
    }
    if (line.indexOf('"Seinfeld"') !== -1 || line.indexOf('The Seinfeld Chronicles') !== -1) {
      episode = line.match(/\{([^(]+)/);
      character = line.match(/\[([^\]]+)]/);
      insertingCharacter = character[1];
      if (episode === null) {
        if (line.indexOf('The Seinfeld Chronicles') !== -1) {
          episode = 'The Seinfeld Chronicles';
        } else {
          console.log('invalid episode title ?');
          console.log(line);
          process.exit();
        }
      } else {
        episode = episode[1].trim();
      }
      episode = NameFixer.FixName(episode);
      if (episode === null) {
        actorLinesInserted++;
        insertActorLine();
        return;
      }
      insertingEpisode = episode;
      return db.query('SELECT episode_id FROM episode WHERE title=$1', [episode], getEpisodeID);
    } else {
      actorLinesInserted++;
      return insertActorLine();
    }
  };

  getEpisodeID = function(err, result) {
    var episodeID;
    if (err !== null) {
      console.log(err);
    }
    if (result.rowCount === 1) {
      episodeID = result.rows[0]['episode_id'];
      insertingEpisodeID = episodeID;
      return getCharacterID();
    } else {
      console.log('episode not found');
      console.log(insertingEpisode);
      return process.exit();
    }
  };

  personInRoleInserted = function(err, result) {
    if (err === null) {
      actorLinesInserted++;
      return insertActorLine();
    } else {
      console.log(err);
      return console.log(result);
    }
  };

  allLinesRead = function() {
    console.log('all Lines Read!');
    return db.query('COMMIT', function() {
      return process.exit();
    });
  };

  getCharacterID = function() {
    if (typeof characterIDS[insertingCharacter] !== 'undefined') {
      insertingCharacterID = characterIDS[insertingCharacter];
      return insertPerson();
    } else {
      return db.query('SELECT character_id FROM character WHERE name=$1', [insertingCharacter], selectCharacterIDCB);
    }
  };

  selectCharacterIDCB = function(err, result) {
    if (result.rowCount === 1) {
      insertingCharacterID = result.rows[0]['character_id'];
      return insertPerson();
    } else {
      return db.query('INSERT INTO character (name) VALUES ($1) RETURNING character_id', [insertingCharacter], characterInserted);
    }
  };

  characterInserted = function(err, result) {
    insertingCharacterID = result.rows[0]['character_id'];
    return insertPerson();
  };

  insertPerson = function() {
    var query;
    characterIDS[insertingCharacter] = insertingCharacterID;
    query = 'INSERT INTO episode_has_person_in_role (episode_id, person_id, role_id,character_id) VALUES ($1, $2, 1, $3)';
    return db.query(query, [insertingEpisodeID, personID, insertingCharacterID], personInRoleInserted);
  };

  pg.connect(process.env.HEROKU_POSTGRESQL_PURPLE_URL, dbConnected);

}).call(this);
