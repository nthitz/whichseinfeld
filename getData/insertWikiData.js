// Generated by CoffeeScript 1.3.3
/*
downloads episode wiki pages
*/

var $, allEpisodesInserted, allEpisodesParsed, allPeopleInserted, createNameArray, db, dbConnected, epListUrl, epListWritten, episodes, episodesInserted, episodesParsed, fs, getListHTMLCB, http, insertEpisode, insertNextPerson, insertPersonWithRole, insertWithRole, insertWritersAndDirectors, numPeopleInserted, parseRow, people, peopleInsertPartComplete, peopleNames, peopleRoleInsertEp, peopleRoleInsertID, peopleRoleInsertRole, peopleToInsert, pg, rows, rowsParsed, stringReplaceAll, url;

http = require('http');

fs = require('fs');

url = require('url');

$ = require('jquery');

pg = require('pg');

epListUrl = 'http://en.wikipedia.org/wiki/List_of_Seinfeld_episodes';

getListHTMLCB = function(response) {
  var str;
  str = '';
  response.on("data", function(data) {
    return str += data;
  });
  response.on("end", function() {
    console.log(str);
    return fs.writeFile("data/wiki/epList.html", str, epListWritten);
  });
  return response.on("error", function(err) {
    console.log('error');
    return console.log(err);
  });
};

rows = null;

rowsParsed = 0;

epListWritten = function() {
  return fs.readFile("data/wiki/epList.html", 'utf8', function(err, data) {
    var row, _i, _len, _results;
    rows = $(data).find(".wikitable.plainrowheaders tr");
    _results = [];
    for (_i = 0, _len = rows.length; _i < _len; _i++) {
      row = rows[_i];
      _results.push(parseRow(row));
    }
    return _results;
  });
};

people = {};

peopleNames = [];

episodes = [];

allEpisodesParsed = false;

parseRow = function(row) {
  var $row, $tds, episode, episodeNumber;
  $row = $(row);
  $tds = $(row).find('td');
  episodeNumber = parseInt($(row).find('th').text());
  if (isNaN(episodeNumber)) {
    rowsParsed++;
    return;
  }
  episode = {
    episodeNumber: parseInt(episodeNumber),
    seasonNumber: parseInt($($tds[0]).text()),
    title: $($tds[1]).text(),
    directors: createNameArray($($tds[2]).text()),
    writers: createNameArray($($tds[3]).text()),
    date: $($tds[4]).text(),
    productionCode: $($tds[5]).text()
  };
  episode.title = episode.title.substr(1, episode.title.length - 2);
  episode.season = parseInt(episode.productionCode.substr(0, 1));
  episode.productionCode = parseInt(episode.productionCode);
  episodes.push(episode);
  rowsParsed += 1;
  if (rowsParsed === rows.length - 1) {
    return episodesParsed();
  }
};

stringReplaceAll = function(str, search, replace) {
  var tmp;
  while (str !== (tmp = str.replace(search, replace))) {
    str = tmp;
  }
  return str;
};

createNameArray = function(str) {
  var name, names, newStr, _i, _len;
  newStr = str;
  newStr = stringReplaceAll(newStr, "Teleplay by: ", "");
  newStr = stringReplaceAll(newStr, "\nStory by: ", "|");
  newStr = stringReplaceAll(newStr, " and ", "|");
  newStr = stringReplaceAll(newStr, " & ", "|");
  newStr = stringReplaceAll(newStr, "\n", "");
  newStr = stringReplaceAll(newStr, ",", "|");
  names = newStr.split("|");
  for (_i = 0, _len = names.length; _i < _len; _i++) {
    name = names[_i];
    names[_i] = name.replace(/^\s+|\s+$/g, "");
  }
  return names;
};

episodesParsed = function() {
  return pg.connect(process.env.HEROKU_POSTGRESQL_PURPLE_URL, dbConnected);
};

db = null;

dbConnected = function(err, client) {
  var ep, p, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
  db = client;
  for (_i = 0, _len = episodes.length; _i < _len; _i++) {
    ep = episodes[_i];
    _ref = ep.directors;
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      p = _ref[_j];
      if (typeof people[p] === 'undefined') {
        people[p] = {
          name: p
        };
        peopleNames.push(p);
      }
    }
    _ref1 = ep.writers;
    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
      p = _ref1[_k];
      if (typeof people[p] === 'undefined') {
        people[p] = {
          name: p
        };
        peopleNames.push(p);
      }
    }
  }
  return db.query("TRUNCATE person", function(err, result) {
    return db.query("SELECT setval('person_person_id_seq',1, false)", insertNextPerson);
  });
};

numPeopleInserted = 0;

insertNextPerson = function(err, result) {
  var insertName, personName, query;
  personName = peopleNames[numPeopleInserted];
  if (typeof personName === 'undefined') {
    allPeopleInserted();
    return;
  }
  insertName = personName.replace("'", "''");
  query = "INSERT INTO person (name) VALUES ('" + insertName + "') RETURNING person_id";
  return db.query(query, function(err, result) {
    people[personName].dbID = result.rows[0].person_id;
    numPeopleInserted += 1;
    return insertNextPerson();
  });
};

allPeopleInserted = function() {
  return db.query("TRUNCATE episode", function(err, result) {
    return db.query("SELECT setval('episode_episode_id_seq',1,false)", function() {
      return db.query("TRUNCATE episode_has_person_in_role", insertEpisode);
    });
  });
};

episodesInserted = 0;

insertEpisode = function() {
  var ep, sql;
  ep = episodes[episodesInserted];
  if (typeof ep === 'undefined') {
    allEpisodesInserted();
    return;
  }
  sql = "INSERT INTO episode (title, airdate, season, seasonnumber, production_code, episode_number) VALUES " + "('" + ep.title.replace("'", "''") + "', '" + ep.date + "', " + ep.season + "," + ep.seasonNumber + "," + ep.productionCode + "," + ep.episodeNumber + ") RETURNING episode_id";
  return db.query(sql, function(err, result) {
    var episodeID;
    episodeID = result.rows[0].episode_id;
    return insertWritersAndDirectors(ep, episodeID);
  });
};

insertWritersAndDirectors = function(ep, dbID) {
  return insertWithRole(ep, 'writer', dbID);
};

numPeopleInserted = 0;

peopleToInsert = [];

peopleRoleInsertEp = null;

peopleRoleInsertRole = null;

peopleRoleInsertID = null;

insertWithRole = function(ep, role, id) {
  peopleToInsert = ep[role + 's'];
  numPeopleInserted = 0;
  peopleRoleInsertEp = ep;
  if (role === 'writer') {
    peopleRoleInsertRole = 3;
  } else if (role === 'director') {
    peopleRoleInsertRole = 2;
  }
  peopleRoleInsertID = id;
  return insertPersonWithRole();
};

insertPersonWithRole = function() {
  var pObject, personToInsert, sql;
  personToInsert = peopleToInsert[numPeopleInserted];
  if (typeof personToInsert === "undefined") {
    peopleInsertPartComplete();
    return;
  }
  pObject = people[personToInsert];
  sql = 'INSERT INTO episode_has_person_in_role (episode_id, person_id, role_id) VALUES (' + peopleRoleInsertID + ',' + pObject.dbID + ',' + peopleRoleInsertRole + ')';
  return db.query(sql, function() {
    numPeopleInserted += 1;
    return insertPersonWithRole();
  });
};

peopleInsertPartComplete = function() {
  if (peopleRoleInsertRole === 3) {
    insertWithRole(peopleRoleInsertEp, 'director', peopleRoleInsertID);
    return;
  }
  episodesInserted += 1;
  return insertEpisode();
};

allEpisodesInserted = function() {
  console.log('done');
  db.end();
  return process.exit();
};

epListWritten();
